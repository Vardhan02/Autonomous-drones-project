Index: Mapping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from djitellopy import tello\r\nimport KeyPressModule as kp\r\nfrom time import sleep\r\nimport numpy as np\r\nimport cv2\r\nimport math\r\n\r\n\r\n####PARAMETERS####\r\nfspeed = 117/10 #Forward Speed in cm/s (15cm/s)\r\naSpeed =360/10 # Angular speed Degrees/s(50)\r\ninterval=0.254\r\n\r\ndInterval=fspeed*interval\r\naInterval=aSpeed*interval\r\n#################################################\r\n\r\nkp.init()\r\nme=tello.Tello()\r\nme.connect()\r\nprint(me.get_battery())\r\nx,y=500,500\r\na=0\r\nyaw=0\r\n\r\npoints=[(0,0),(0,0)]\r\n\r\ndef getKeyboardInput():\r\n    lr,fb,ud,yv=0,0,0,0\r\n    aSpeed=50\r\n    speed = 50\r\n    global yaw,x,y,a\r\n    d=0\r\n\r\n    if kp.getKey(\"LEFT\"):\r\n        lr=-speed\r\n        d=dInterval\r\n        a=-180\r\n\r\n    elif kp.getKey(\"RIGHT\"):\r\n        lr=speed\r\n        d = -dInterval\r\n        a = 180\r\n\r\n    if kp.getKey(\"UP\"):\r\n        fb=speed\r\n        d = dInterval\r\n        a = 270\r\n    elif kp.getKey(\"DOWN\"):\r\n        fb=-speed\r\n        d = -dInterval\r\n        a = -90\r\n\r\n    if kp.getKey(\"w\"):\r\n        ud=speed\r\n    elif kp.getKey(\"s\"):\r\n        ud=-speed\r\n\r\n    if kp.getKey(\"a\"):\r\n        yv=-aSpeed\r\n        yaw -= aInterval\r\n\r\n    elif kp.getKey(\"d\"):\r\n        yv=aSpeed\r\n        yaw += aInterval\r\n\r\n    if kp.getKey(\"q\"):\r\n        me.land();sleep(3)\r\n    if kp.getKey(\"e\"):\r\n        me.takeoff()\r\n\r\n        sleep(interval)\r\n        a+=yaw\r\n        x += int(d*math.cos(math.radians(a)))\r\n        x += int(d * math.sin(math.radians(a)))\r\n\r\n    return [lr,fb,ud,yv]\r\ndef drawPoints(img,points):\r\n    for point in points:\r\n        cv2.cicle(img,point,5,(0,0,255),cv2.FILLED)\r\n    cv2.cicle(img, points[-1], 8, (0, 0, 255), cv2.FILLED)\r\n    cv2.putText(img,f'({(points[-1][0]-500)/100},{(points[-1][0]-500)/100}m',(points[-1][0]+10,points[-1][1]+30),cv2.FONT_HERSHEY_PLAIN,1,(255,0,255),1)\r\n\r\nwhile True:\r\n    vals=getKeyboardInput()\r\n    me.send_rc_control(vals[0],vals[1],vals[2],vals[3])\r\n\r\n    img=np.zeros((1000,1000,3), np.uint8)\r\n    if (points[-1][0]!=vals[4] or points[-1][1]!= vals[5]):\r\n        points.append((vals[4],vals[5]))\r\n    drawPoints(img,points)\r\n    cv2.imshow(\"Output\", img)\r\n    cv2.waitKey(1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Mapping.py b/Mapping.py
--- a/Mapping.py	
+++ b/Mapping.py	
@@ -16,9 +16,9 @@
 #################################################
 
 kp.init()
-me=tello.Tello()
-me.connect()
-print(me.get_battery())
+#me=tello.Tello()
+#me.connect()
+#print(me.get_battery())
 x,y=500,500
 a=0
 yaw=0
Index: Face detection.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># For face detection\r\n# Importing libraries\r\nimport cv2\r\nimport mediapipe as mp\r\nimport time\r\n\r\n# Creating a class for face detection\r\nclass FaceDetector():\r\n    # Intializing all face detection parameters\r\n    def __init__(self, minDetectionCon=0.5):\r\n        # the minimum confidence is set \r\n        self.minDetectionCon = minDetectionCon\r\n\r\n        self.mpFaceDetection = mp.solutions.face_detection\r\n        self.mpDraw = mp.solutions.drawing_utils # for drawing\r\n        self.faceDetection = self.mpFaceDetection.FaceDetection(self.minDetectionCon) # Intializes Face detection\r\n\r\n    def findFaces(self, img, draw=True):\r\n\r\n        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # the output of imgRgb is stored in results\r\n        self.results = self.faceDetection.process(imgRGB)\r\n        bboxs = []\r\n        if self.results.detections:\r\n            for id, detection in enumerate(self.results.detections):\r\n                bboxC = detection.location_data.relative_bounding_box\r\n                ih, iw, ic = img.shape\r\n                bbox = int(bboxC.xmin * iw), int(bboxC.ymin * ih), \\\r\n                       int(bboxC.width * iw), int(bboxC.height * ih)\r\n                bboxs.append([id, bbox, detection.score])\r\n                if draw:\r\n                    img = self.fancyDraw(img,bbox)\r\n\r\n                    cv2.putText(img, f'{int(detection.score[0] * 100)}%',\r\n                            (bbox[0], bbox[1] - 20), cv2.FONT_HERSHEY_PLAIN,\r\n                            2, (255, 0, 255), 2)\r\n        return img, bboxs\r\n\r\n    def fancyDraw(self, img, bbox, l=30, t=5, rt= 1):\r\n        x, y, w, h = bbox\r\n        x1, y1 = x + w, y + h\r\n\r\n        cv2.rectangle(img, bbox, (255, 0, 255), rt)\r\n        # Top Left  x,y\r\n        cv2.line(img, (x, y), (x + l, y), (255, 0, 255), t)\r\n        cv2.line(img, (x, y), (x, y+l), (255, 0, 255), t)\r\n        # Top Right  x1,y\r\n        cv2.line(img, (x1, y), (x1 - l, y), (255, 0, 255), t)\r\n        cv2.line(img, (x1, y), (x1, y+l), (255, 0, 255), t)\r\n        # Bottom Left  x,y1\r\n        cv2.line(img, (x, y1), (x + l, y1), (255, 0, 255), t)\r\n        cv2.line(img, (x, y1), (x, y1 - l), (255, 0, 255), t)\r\n        # Bottom Right  x1,y1\r\n        cv2.line(img, (x1, y1), (x1 - l, y1), (255, 0, 255), t)\r\n        cv2.line(img, (x1, y1), (x1, y1 - l), (255, 0, 255), t)\r\n        return img\r\n\r\n\r\ndef main():\r\n    cap = cv2.VideoCapture(0)\r\n    pTime = 0\r\n    detector = FaceDetector()\r\n    while True:\r\n        success, img = cap.read()\r\n        img, bboxs = detector.findFaces(img)\r\n        print(bboxs)\r\n\r\n        cTime = time.time()\r\n        fps = 1 / (cTime - pTime)\r\n        pTime = cTime\r\n        cv2.putText(img, f'FPS: {int(fps)}', (20, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)\r\n        cv2.imshow(\"Image\", img)\r\n        cv2.waitKey(1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Face detection.py b/Face detection.py
--- a/Face detection.py	
+++ b/Face detection.py	
@@ -4,6 +4,7 @@
 import mediapipe as mp
 import time
 
+
 # Creating a class for face detection
 class FaceDetector():
     # Intializing all face detection parameters
